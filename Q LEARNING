import gym
import numpy as np
env = gym.make("FrozenLake-v1", is_slippery=True)
state_size = env.observation_space.n
action_size = env.action_space.n
Q = np.zeros((state_size, action_size))
episodes = 2000
max_steps = 100
learning_rate = 0.8
discount_factor = 0.95
epsilon = 1.0
epsilon_decay = 0.995
epsilon_min = 0.01
for episode in range(episodes):
    state = env.reset()[0]
    done = False

    for step in range(max_steps):
        if np.random.uniform(0, 1) < epsilon:
            action = env.action_space.sample()
        else:
            action = np.argmax(Q[state, :])
        next_state, reward, done, truncated, info = env.step(action)

        Q[state, action] = Q[state, action] + learning_rate * (
            reward + discount_factor * np.max(Q[next_state, :]) - Q[state, action]
        )

        state = next_state

        if done:
            break

    if epsilon > epsilon_min:
        epsilon *= epsilon_decay

print("\n Training completed!")
print("Final Q-Table:\n", Q)

for episode in range(5):
    state = env.reset()[0]
    done = False
    print(f"\nTest Episode {episode+1}")
    env.render()
    while not done:
        action = np.argmax(Q[state, :])
        state, reward, done, truncated, info = env.step(action)
        env.render()

    if reward == 1:
        print("✅ Agent reached the goal!")
    else:
        print("❌ Agent fell or got stuck.")
